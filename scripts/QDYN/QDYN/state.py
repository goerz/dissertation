"""
Working with (real-valued) pulses
"""
import numpy as np
import re


class State(object):
    """
    Class describing Pulse

    Attributes
    ----------

    rho : ndarray(float64)
        time points at which the pulse values are defined
    psi : ndarray(float64), ndarray(complex128)
        array of real or complex pulse values
    """

    def __init__(self, from_dump=None):
        """
        Wave function or density matrix
        """
        self.psi = None
        self.rho = None
        if from_dump is not None:
            self.read_dump(from_dump)

    def distance(self, other):
        """
        Return the distance to another state
        """
        assert self.psi is not None, "self must be wave function"
        assert other.psi is not None, "other must be wave function"
        diff = self.psi - other.psi
        return np.sqrt(abs(np.vdot(diff, diff)))

    def read_dump(self, dump_file):
        """
        Read dump, as generated by the dump_ascii_state_r QDYN routine
        """
        int_line = re.compile(r'^\d+$')
        complex_line = re.compile(r'^[\dE.+-]+\s+[\dE.+-]+$')
        with open(dump_file) as in_fh:
            in_psi = False
            i = 0
            for line in in_fh:
                line = line.strip()
                if line.startswith("#"):
                    in_psi = False
                if line == "# psi":
                    in_psi = True
                    i = 0
                if in_psi:
                    if int_line.match(line):
                        self.psi = np.zeros(int(line), dtype=np.complex128)
                    elif complex_line.match(line):
                        self.psi[i] = read_complex(line)
                        i += 1


def fix_fortran_exponent(num_str):
    """
    In 3-digit exponents, Fortran drops the 'E'. Return a string with the 'E'
    restored.
    """
    if not 'E' in num_str:
        return re.sub('(\d)([+-]\d)', r'\1E\2', num_str)
    return num_str


def read_complex(str):
    """
    Convert a string to a complex number
    """
    real_part, imag_part = str.split()
    real_part = fix_fortran_exponent(real_part)
    imag_part = fix_fortran_exponent(imag_part)
    return float(real_part) + 1.0j*float(imag_part)
